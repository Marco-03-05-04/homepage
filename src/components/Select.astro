---
import classnames from "classnames";
import { Icon } from "astro-icon";
const { label = "", value = "", error = null, name = "", options = [] } = Astro.props;
let { focused, menuOpen } = Astro.props;

---

<script>
  let menuOpen = false;
  let focused;

  const closeMenu = () => {
    menuOpen = false;
    document.removeEventListener("mousedown", clickOutsideEventListener);
  };

  function clickOutsideEventListener() {
    closeMenu();
  };
</script>

<div class={classnames("ts-select", {focused: focused || menuOpen, shrink: focused || menuOpen || (value &&
  value.length> 0), error: error && error.length > 0})}
  >
  <label for="outlined-basic">{label}</label>
  <div class="input">
    <select aria-invalid="false" id="outlined-basic" {name} value={value ?? "" } onfocus={()=> (focused = true)}
      onblur={() => {
      focused = false;
      //dispatch("blur", {});
      }}
      onchange={(e) => {
      //component.value = e.target.value;
      //dispatch("change", {});
      }}
      onkeyup={(e) => {
      //component.value = e.target.value;
      //dispatch("keyup");
      }}
      onmousedown={(e) => {
      e.preventDefault();
      setTimeout(() => {
      // Wait for the transition to end
      if (menuOpen) {
      document.addEventListener("mousedown", Astro.props.clickOutsideEventListener);
      }
      }, 250);
      menuOpen = true;
      }}
      >
      {options.map((option) => (
      <option value={option.value}>{option.text}</option>
      ))}
    </select>
    <Icon pack="mdi" name="chevron-down" class={classnames("arrow", {open: menuOpen})} />
    <!-- <img class={classnames("arrow", {open: menuOpen})} src="../img/icons/arrowDropDown.svg" alt="" /> -->
    <fieldset aria-hidden="true" class="fieldset">
      <legend class="css-173wfxe"><span>{label}</span></legend>
    </fieldset>
  </div>
  <div class={classnames("menu", {open: menuOpen})}>
    <ul>
      {options.map((option) => (
      <li onmousedown={()=> {
        //component.value = option.value;
        Astro.props.closeMenu();
        //dispatch("change", {});
        }}
        >
        {option.text}
      </li>
      ))}
    </ul>
  </div>
</div>

<style>
  .ts-select {
    position: relative;
    margin: var(--spacing-1);
  }

  label {
    color: rgba(0, 0, 0, 0.6);
    font-family: Roboto, Helvetica, Arial, sans-serif;
    font-weight: 400;
    font-size: 1rem;
    line-height: 1.4375em;
    letter-spacing: 0.00938em;
    padding: 0px;
    display: block;
    transform-origin: center top;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: calc(100% - 24px);
    position: absolute;
    left: 0px;
    top: 0px;
    transform: translate(14px, 16px) scale(1);
    transition: color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
      transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms,
      max-width 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
    z-index: 1;
    pointer-events: none;
    box-sizing: border-box;
    transform-origin: left center;
  }

  .shrink label {
    transform: translate(14px, -10px) scale(0.75);
    max-width: 100%;
    background: #fff;
    padding: 0 4px;
  }

  .shrink fieldset legend {
    visibility: visible;
  }

  .shrink fieldset span {
    padding-left: 5px;
    padding-right: 5px;
    display: inline-block;
  }

  .focused label {
    color: var(--color-blue);
    transform: translate(14px, -10px) scale(0.75);
  }

  .focused .fieldset {
    border-color: var(--color-blue);
    border-width: 2px;
  }

  .error label {
    color: var(--color-error);
  }

  .error .fieldset {
    border-color: var(--color-error);
    border-width: 2px;
  }

  .input select {
    box-sizing: content-box;
    color: black;
    border-color: currentcolor;
    font: inherit;
    letter-spacing: inherit;
    border: 0px none;
    background: rgba(0, 0, 0, 0) none repeat scroll 0% 0%;
    margin: 0px;
    display: block;
    min-width: 0px;
    width: 100%;
    animation-name: mui-auto-fill-cancel;
    animation-duration: 10ms;
    padding: 16.5px 14px;
    outline: none;
    box-sizing: border-box;
    -moz-appearance: none;
    /* Firefox */
    -webkit-appearance: none;
    /* Safari and Chrome */
    appearance: none;
    cursor: pointer;
  }

  .arrow {
    width: 26px;
    height: 26px;
    position: absolute;
    right: 16px;
    top: 14px;
    opacity: 0.6;
    pointer-events: none;
  }

  .arrow .open {
    transform: rotate(180deg);
  }

  .fieldset {
    text-align: left;
    position: absolute;
    inset: -5px 0px 0px;
    margin: 0px;
    padding: 0px 8px;
    pointer-events: none;
    border-radius: inherit;
    border-style: solid;
    border-width: 1px;
    overflow: hidden;
    min-width: 0%;
    border-color: rgba(0, 0, 0, 0.38);
    border-radius: 4px;
  }

  .fieldset legend {
    float: unset;
    display: block;
    width: auto;
    padding: 0px;
    height: 11px;
    font-size: 0.75em;
    visibility: hidden;
    max-width: 0.01px;
    transition: max-width 50ms cubic-bezier(0, 0, 0.2, 1) 0ms;
    white-space: nowrap;
    background-color: #fff;
  }

  .fieldset legend span {
    padding-left: 5px;
    padding-right: 5px;
    display: inline-block;
    visibility: hidden;
  }

  .menu {
    border-radius: 2px;
    min-width: 120px;
    transition: opacity 251ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
      transform 167ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
      box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    transform-origin: 60px 0px;
    background-color: rgb(255, 255, 255);
    color: rgba(0, 0, 0, 0.87);
    border-radius: 4px;
    box-shadow: rgb(0 0 0 / 20%) 0px 5px 5px -3px,
      rgb(0 0 0 / 14%) 0px 8px 10px 1px, rgb(0 0 0 / 12%) 0px 3px 14px 2px;
    position: absolute;
    overflow: hidden auto;
    min-height: 16px;
    outline: 0px;
    width: 100%;
    z-index: 10;
    opacity: 0;
    transform: scale(90%, 50%);
    top: 56px;
    pointer-events: none;
  }

  .menu .open {
    opacity: 1;
    transform: scale(100%, 100%);
    pointer-events: all;
  }

  .menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .menu li {
    color: #000;
    padding: 6px 16px;
    cursor: pointer;
    min-height: 36px;
    vertical-align: middle;
  }

  .menu li:hover {
    background-color: rgba(0, 0, 0, 0.04);
  }

  /* @media only screen and (max-width: 600px) {
    .ts-select {
      max-width: 100%;
    }
  } */
</style>